@model StajyerTakipSistemi.Web.Models.InternDashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<style>
    main.pb-3 {
        overflow: visible !important;
    }

    #alertDiv {
        position: fixed;
        top: 0;
        left: 50%;
        transform: translateX(-50%);
        z-index: 1000;
    }

    .tooltip-blue {
        --balloon-color: #0d6efd;
    }
 

    .report-container {
        height: 601px;
        margin-left: auto;
        width: 321px;
        padding: 2rem;
    }

    .selected-files-container {
        max-height: 300px;
        overflow-y: auto;
        border: 1px solid #000;
    }

    .file-upload {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 1rem;
        font-size: smaller;
    }

    #fileInput {
        display: none;
    }

    label { 
        color: #fff;
        padding: 10px 20px;
        cursor: pointer;
    }

    .selected-files {
        text-align: left;
    }

    .delete-button {
        background-color: #ff0000;
        color: #fff;
        border: none;
        cursor: pointer;
        padding: 5px 10px;
        margin-left: 10px;
        align-self: end;
    }

    .selected-files-container {
        width: 75%;
        overflow-y: auto;
        border: 1px solid #000;
        padding: 1rem;
        overflow-x: hidden;
        margin-block: 1rem;
    }

    .sub-selected-file {
        display: flex;
        flex-direction: row;
        flex-wrap: nowrap;
        justify-content: space-between;
        padding-block: 1rem;
        border-bottom: dashed;
    }

 
    .calendar-container {
        background-color: #fff;
        /* box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); */
        border-radius: 8px;
        overflow: hidden;
    }

    .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        background-color: black;
        color: #fff;
    }

    .calendar {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 1px;
    }

    .day {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 40px;
        border: 1px solid #ddd;
        cursor: pointer;
    }

    .marked {
        background-color: black;
        color: #fff;
    }

    .arrow {
        border: solid black;
        border-width: 0 3px 3px 0;
        display: inline-block;
        padding: 3px;
    }

    .right {
        transform: rotate(-45deg);
        -webkit-transform: rotate(-45deg);
    }

    .left {
        transform: rotate(135deg);
        -webkit-transform: rotate(135deg);
    }

    button#prevMonth, button#nextMonth {
        display: flex;
        align-content: center;
        height: 30px;
        flex-wrap: wrap;
        border-radius: 50%;
        width: 30px;
        background-color: white;
        border: 0;
    }
 
    .task-container {
        height: fit-content;
        max-height: 148px;
        width: 684px;
        overflow-y: auto;
        overflow-x: hidden;
        background-color: transparent;
        border-radius: 0 !important;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        margin-block: 1rem;
        margin-inline: 1rem;
    }

    .task {
        background-color: #cbd6e8;
        min-width: calc(50% - 2rem); /* Adjust the width as needed (e.g., 50% for two items in a row) */
        height: fit-content;
        border-radius: 10px;
        margin-bottom: 1rem;
        margin-right: 2rem;
        padding-inline: 1rem;
        padding-block: 1rem;
    }

    .object-center {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .profile-pic {
        color: transparent;
        transition: all .3s ease;
        display: flex;
        justify-content: center;
        align-items: center;
        position: relative;
        transition: all .3s ease;
        margin-bottom: 1rem;
    }

        .profile-pic input {
            display: none;
        }

        .profile-pic img {
            position: absolute;
            object-fit: cover;
            width: 165px;
            height: 165px;
            box-shadow: 0 0 10px 0 rgba(255, 255, 255, .35);
            border-radius: 100px;
            z-index: 0;
            z-index: 0;
            border: solid black;
        }

        .profile-pic .-label {
            cursor: pointer;
            height: 165px;
            width: 165px;
        }

        .profile-pic:hover .-label {
            display: flex;
            justify-content: center !important;
            background-color: rgba(0, 0, 0, .8);
            z-index: 10000;
            color: rgb(250, 250, 250);
            transition: background-color .2s ease-in-out;
            border-radius: 100px;
            margin-bottom: 0;
            padding-block: 4rem;
            flex-direction: row;
            align-items: center;
        }

        .profile-pic span {
            display: inline-flex;
            padding: .2em;
            height: 2em;
        }

    .glyphicon {
        position: relative;
        top: 1px;
        display: inline-block;
        font-family: 'Glyphicons Halflings';
        font-style: normal;
        font-weight: 400;
        line-height: 1;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }
</style>
@section Styles{
    <link rel="stylesheet" href="~/dashboard.css">
    }
<div class="container">
    <div class="dashboard-con" style="padding-block-start: 2rem ;">
        <div class="dashboard-header">
            <div class="dashboard-header__title">Dashboard</div>
            @{

                if (DateTime.Now.Date == Model.Intern.EndDate.Date)
                {
                        <div id="finaldiv" class="dashboard-header__date blink" style="margin-right: 1rem;"> 
                            <a asp-action="Final" asp-controller="Final" class="btn btn-dark">FİNAL KAYITLARINI EKLE!</a>

                        </div>
                }
            }
            <div id="profilePhoto">
                <a class="BtnChangePhoto">
                @if (Model.Intern.Photo == null)
                {
                    <img src="~/DefaultPersonAvatar.png" style="border-radius: 50%; width: 35px; height: 35px; margin-right: 1rem; background-color: White;" />
                }
                else
                {
                     <img src="@Url.Content("~/ProfilePictures/" +  Model.Intern.Photo)" style="border-radius: 50%; width: 35px; height: 35px; margin-right: 1rem; background-color: White;" /> 
                   

                }
                </a>
                


                <dialog id="location-modal" style="z-index: 1;">
                    <form id="ChangePicture" asp-controller="Home" asp-action="UploadPicture" method="post" enctype="multipart/form-data">


                        <div class="profile-pic" >
                            <label class="-label" for="file"> 
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-camera-fill" viewBox="0 0 16 16">
                                    <path d="M10.5 8.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0" />
                                    <path d="M2 4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-1.172a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 9.172 2H6.828a2 2 0 0 0-1.414.586l-.828.828A2 2 0 0 1 3.172 4zm.5 2a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1m9 2.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0" />
                                </svg>
                                <span>Change Image</span>
                            </label>
                            <input id="file" type="file" name="file" onchange="loadFile(event)" accept=".jpg, .jpeg, .png" />
                            <img src="@Url.Content("~/ProfilePictures/" +  Model.Intern.Photo)" id="output" width="200" />
                        </div>

                        <div class="actions">
                            <button type="button" asp-action="RemovePhoto" asp-controller="Home" class="remove-photo btn btn-dark">Fotoğrafı Kaldır</button>
                            <button type="submit" class="submit-button btn btn-dark">Kaydet</button>
                            <button type="button" class="close-modal btn btn-dark">Kapat</button>
                        </div>
                    </form>
                    <div id="resultContainer"></div>
                </dialog>
            </div>




            <div class="dashboard-header__date">@DateTime.Now.ToString("dddd"), @DateTime.Now.Day @DateTime.Now.ToString("MMMM")</div>
        </div>
        <div class="dashboard-card weather" style="box-shadow: inset 4px 0 0 #3bb275, 0 1px 0 rgba(0, 0, 0, 0.1);">
            <div class="dashboard-card__title"><span class="wi wi-day-sunny"></span>Günlük rapor yükle</div>
            <div class="dashboad-card__content">
                <div class="dashboard-card__card-piece">




                    @using (Html.BeginForm("UploadFiles", "Home", FormMethod.Post, new { enctype = "multipart/form-data", id = "uploadForm" }))
                    {
                        <div class="file-upload">
                            <input type="file" name="File" id="fileInput" multiple>

                            <button type="button" id="chooseFilesBtn" class="btn btn-dark" @(Model.HasReportForToday ? "disabled" : "") onclick="document.getElementById('fileInput').click();">Dosya Seç</button>
                            <div class="selected-files-container">
                                <div id="selectedFiles" class="selected-files">

                                    @if (Model.ExistingReportForToday != null)
                                    {
                                        <div style="display:flex;flex-flow:row;" data-report-id="@Model.ExistingReportForToday.Id">
                                            <span style="max-width: 415px;overflow-wrap: anywhere;overflow: overlay;">@Model.ExistingReportForToday.FileName</span>
                                            <button type="button" id="deleteButton" class="btn btn-danger" onclick="Sure(@Model.ExistingReportForToday.Id)" style="display:none;">Sil</button>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div id="buttons" style="display:flex;flex-flow:row;gap:1rem;">

                                <button type="button" id="editButton" class="btn btn-dark edit-button" style="width: 120px;" @(Model.HasReportForToday ? "" : "disabled")>Düzenle</button>
                                <button type="submit" id="submitButton" class="btn btn-dark submit-button" style="width: 120px;" disabled>Gönder</button>
                            </div>

                        </div>
                    }
                   
                   
                

                    @if (TempData["Message"] != null)
                    {
                        <div id="alertDiv" class="alert @(TempData["AlertClass"])">
                            @TempData["Message"]
                        </div>

                        <script>
                            document.addEventListener('DOMContentLoaded', function () {
                                setTimeout(function () {
                                    var alertDiv = document.getElementById('alertDiv');
                                    alertDiv.style.display = 'none';
                                }, 5000);
                            });
                        </script>
                    }
                    <a asp-action="Index" asp-controller="DailyReport" asp-route-id="@Model.Intern.Id" class="dashboard-card__link" tabindex="1" target="_blank" style="margin-top: 67px;">View in another tab<span class="fa fa-angle-right"></span></a>
                </div>
            </div>
        </div>
        <div class="dashboard-card temperature" style="background-color:white;height: 312px !important;">
            <div class="dashboad-card__content" >
                <div class="dashboard-card__card-piece">
                    <div class="calendar-container">
                        <div class="calendar-header">
                            <button style="padding-left: 12px;" id="prevMonth"><i class="arrow left"></i></button>
                            <a asp-action="Index" asp-controller="AbsenceInformation" asp-route-id="@Model.Intern.Id" aria-label="Devamsızlık bilgisi görüntüle" class="tooltip-blue" data-balloon-pos="down" tabindex="1" target="_blank" style="text-decoration:none;"> <h2 id="currentMonthYear"></h2> </a>
                           
                            
                            <button style="padding-left: 9px;" id="nextMonth"><i class="arrow right"></i></button>
                        </div>
                        <div class="calendar" id="calendar"></div>
                    </div>
                   
                  
                   
                </div>
            </div>
        </div>
        <div onclick="showactivetasks()" style="cursor:pointer;padding-block-start: 2.5rem;box-shadow: inset 4px 0 0 #3bb275, 0 1px 0 rgba(0, 0, 0, 0.1);" class="dashboard-card wifi">
            <div class="dashboad-card__content">
                <div class="dashboard-card__card-piece">
                    <div class="status status_success">
                        <div class="status__icon"><span class="fa fa-check"></span></div>
                        <p onclick="showactivetasks()" class="status__text">Görevler</p>
                    </div>
                    <a asp-action="ShowActiveTasks" asp-controller="Task" asp-route-id="@Model.Intern.Id" class="dashboard-card__link" tabindex="1" target="_blank">View in another tab<span class="fa fa-angle-right"></span></a>
                </div>
            </div>
        </div>
        <div onclick="shownotactivetasks()" style="cursor:pointer;padding-block-start: 2.5rem;box-shadow: inset 4px 0 0 #3bb275, 0 1px 0 rgba(0, 0, 0, 0.1);" class="dashboard-card alarm">
            <div class="dashboad-card__content">
                <div class="dashboard-card__card-piece">
                    <div class="status status_danger">
                        <div class="status__icon"><span class="fa fa-times"></span></div>
                        <p onclick="shownotactivetasks()" class="status__text">Geçmiş Görevler</p>
                    </div>
                    <a asp-action="ShowOverdueTasks" asp-controller="Task" asp-route-id="@Model.Intern.Id" class="dashboard-card__link" tabindex="1" target="_blank">View in another tab<span class="fa fa-angle-right"></span></a>
                </div>
            </div>
        </div>
        <div class="dashboard-card light" style="box-shadow: inset 4px 0 0 #3bb275, 0 1px 0 rgba(0, 0, 0, 0.1);">
            <div class="dashboad-card__content">
                <div class="dashboard-card__card-piece">
                   


                    <div style="display:flex;flex-flow:column;">

                        <div id="activetaskdiv">
                            <p class="dashboard-card__title">Aktif görevler</p>
                            <div class="task-container" @* onWheel="this.scrollLeft+=event.deltaY>0?100:-100" *@>
                                @if (Model.AssignedActiveTask != null && Model.AssignedActiveTask.Count > 0)
                                {
                                    @foreach (var task in Model.AssignedActiveTask)
                                    {
                                        <div class="task">
                                            <h3 style="font-size: 22px;">@task.Task.Subject</h3>
                                            <p style="margin-bottom: 0rem;">Görevin Atanma Tarihi: @task.AssignmentDate</p>
                                            <p style="margin-bottom: 0rem;">Son Teslim Tarihi: @task.DueDate</p>
                                            <a href="@Url.Content("~/TaskFiles/" + task.Task.Contents)" target="_blank">İndir</a>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="task" style="width:100%;color: #842029;border-color: #f5c2c7;background-color: #f8d7da !important;margin-right: 0rem;">
                                        <p>Aktif görev bulunmamaktadır.</p>
                                    </div>

                                }

                            </div>
                        </div>
                        <div id="notactivetaskdiv" style="display:none;">
                            <p class="dashboard-card__title">Geçmiş görevler</p>
                            <div class="task-container" @* onWheel="this.scrollLeft+=event.deltaY>0?100:-100" *@>
                                @if (Model.AssignedOverdueTask != null && Model.AssignedOverdueTask.Count > 0)
                                {
                                    @foreach (var task in Model.AssignedOverdueTask)
                                    {
                                        <div class="task">
                                            <h3 style="font-size: 22px;">@task.Task.Subject</h3>
                                            <p style="margin-bottom: 0rem;">Görevin Atanma Tarihi: @task.AssignmentDate</p>
                                            <p style="margin-bottom: 0rem;">Son Teslim Tarihi: @task.DueDate</p>
                                            <a href="@Url.Content("~/TaskFiles/" + task.Task.Contents)" target="_blank">İndir</a>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="task" style="width:100%;color: #842029;border-color: #f5c2c7;background-color: #f8d7da !important;margin-right: 0rem;">
                                        <p>Son teslim tarihi geçmiş görev bulunmamaktadır.</p>
                                    </div>

                                }

                            </div>
                        </div>

                    </div>
                    
                </div>
            </div>
        </div>

    </div>
</div>
   
@section scripts {
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var fileInput = document.getElementById("fileInput");
            var submitButton = document.getElementById("submitButton");
            var editButton = document.getElementById("editButton");
            var chooseFilesBtn = document.getElementById("chooseFilesBtn");
            var deleteButton = document.getElementById("deleteButton");

            fileInput.addEventListener("change", function () {
                submitButton.disabled = fileInput.files.length === 0;
            });

            editButton.addEventListener("click", function () {
                if (editButton.innerText === "Edit") {
                    //Edit mode
                    chooseFilesBtn.disabled = false;
                    deleteButton.style.display = "block";
                    editButton.innerText = "Exit Edit";
                } else {
                    // Exit edit mode
                    chooseFilesBtn.disabled = true;
                    deleteButton.style.display = "none";
                    editButton.innerText = "Edit";
                }
            });
        });
     
        // Dosya giriş alanını dinleyin
        const fileInput = document.getElementById("fileInput");
        fileInput.addEventListener("change", function () {
            const selectedFiles = fileInput.files;


            if (selectedFiles.length > 0) {
                //Dosya adlarını ve boyutlarını görüntüle
                const fileInfoContainer = document.getElementById("selectedFiles");

                fileInfoContainer.innerHTML = ""; // Önceki dosya bilgilerini temizle

                for (let i = 0; i < selectedFiles.length; i++) {
                    const file = selectedFiles[i];
                    const fileName = file.name;
                    const fileSize = (file.size / 1024).toFixed(2) + " KB";

                    // Dosya bilgilerini görüntülemek için yeni bir öğe oluşturun
                    const fileInfoItem = document.createElement("div");
                    fileInfoItem.textContent = `${fileName} (${fileSize})`;

                    // Dosya bilgilerini fileInfoContainer'a ekleyin
                    fileInfoContainer.appendChild(fileInfoItem);
                }
            }
        });
        function showactivetasks() {
            var atdiv = document.getElementById('activetaskdiv');
            var natdiv = document.getElementById('notactivetaskdiv');
            atdiv.style.display = "block";
            natdiv.style.display = "none";

        }
        function shownotactivetasks() {
            var atdiv = document.getElementById('activetaskdiv');
            var natdiv = document.getElementById('notactivetaskdiv');
            natdiv.style.display = "block";
            atdiv.style.display = "none";

        }
      
            document.addEventListener('DOMContentLoaded', function () {
                const calendarContainer = document.getElementById('calendar');
                const currentMonthYearElement = document.getElementById('currentMonthYear');
                const prevMonthButton = document.getElementById('prevMonth');
                const nextMonthButton = document.getElementById('nextMonth');

                let currentDate = new Date();
                var markedDates = @Html.Raw(Json.Serialize(ViewBag.MarkedDates)); 

                function generateCalendar(year, month) {
                    const daysInMonth = new Date(year, month + 1, 0).getDate();
                    const firstDay = new Date(year, month, 1).getDay();

                    calendarContainer.innerHTML = '';

                for (let i = (firstDay === 0 ? 6 : firstDay - 1); i > 0; i--) {

                        const emptyDay = document.createElement('div');
                        emptyDay.classList.add('day', 'empty');
                        calendarContainer.appendChild(emptyDay);
                    }

                    for (let i = 1; i <= daysInMonth; i++) {
                        const day = document.createElement('div');
                        day.classList.add('day');
                        day.textContent = i;

                    if (markedDates.includes(`${year}-${(month + 1).toString().padStart(2, '0')}-${i.toString().padStart(2, '0')}`)) {
                        day.classList.add('marked');
                    }


                        calendarContainer.appendChild(day);
                    }

                    currentMonthYearElement.textContent = `${getMonthName(month)} ${year}`;
                }

                function getMonthName(month) {
                    const monthNames = [
                        "Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran",
                        "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"
                    ];
                    return monthNames[month];
                }

                function updateCalendar() {
                    const year = currentDate.getFullYear();
                    const month = currentDate.getMonth();
                    generateCalendar(year, month);
                }

                prevMonthButton.addEventListener('click', function () {
                    currentDate.setMonth(currentDate.getMonth() - 1);
                    updateCalendar();
                });

                nextMonthButton.addEventListener('click', function () {
                    currentDate.setMonth(currentDate.getMonth() + 1);
                    updateCalendar();
                });

                updateCalendar();
            });
             

            function Sure(reportId) {
                swal({
                    title: "Bu raporu silmek istediğinden emin misin?",
                    icon: "warning",
                    buttons: true,
                    dangerMode: true,
                })
                    .then((willDelete) => {
                        if (willDelete) {
                            deleteReport(reportId);
                        }
                    });


            }

            function deleteReport(reportId) {
                $.ajax({
                    url: '/Home/DeleteReport',
                    type: 'POST',
                    data: { reportId: reportId },
                    success: function (result) {
                        if (result.success) {

                            location.reload();

                        } else {

                            swal("Rapor silinemedi.", {
                                icon: "error",
                            });
                        }
                    },
                    error: function (error) {
                        swal("Rapor silinemedi.", {
                            icon: "error",
                        });
                    }
                });
            } 
     
        $(document).ready(function () {

            $('#profilePhoto .BtnChangePhoto').click(function () {

                $('#location-modal').show();
            });

            $('.close-modal').click(function () {

                $('#location-modal').hide();

                clearModalContent();
            });

            $('.remove-photo').click(function () {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("RemovePhoto", "Home")',
                    data: {},
                    success: function (result) {
                        console.log(result);
                        location.reload();
                    },
                    error: function (error) {
                        console.error(error);
                    }
                });
            });

            function clearModalContent() {
                $('#location-modal input[type="text"]').val("");
                $('#selectedFiles').empty();
            }
        });
    
        var loadFile = function (event) {
            var image = document.getElementById("output");
            image.src = URL.createObjectURL(event.target.files[0]);
        };

     
    </script>

}
