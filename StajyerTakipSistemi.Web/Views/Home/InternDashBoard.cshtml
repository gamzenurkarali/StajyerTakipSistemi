@model StajyerTakipSistemi.Web.Models.InternDashboardViewModel
@{
    ViewData["Title"] = "deneme";
}

<style>
    main.pb-3 {
        overflow: visible !important;
    }

    #alertDiv {
        position: fixed;
        top: 0;
        left: 50%;
        transform: translateX(-50%);
        z-index: 1000;
    }
</style>



@section Styles{
    <link rel="stylesheet" href="~/dashboard.css">
    }
<div class="container">
    <div class="dashboard-con">
        <div class="dashboard-header">
            <div class="dashboard-header__title">Dashboard</div>
            @{

                if (DateTime.Now.Date == Model.Intern.EndDate.Date)
                {
                    <div id="finaldiv" class="dashboard-header__date blink" style="margin-right: 1rem;"> 
                        <a asp-action="Final" asp-controller="Final" class="btn btn-dark">FİNAL KAYITLARINI EKLE!</a>

                    </div>
                }
            }
            
            <div class="dashboard-header__date">@DateTime.Now.ToString("dddd"), @DateTime.Now.Day @DateTime.Now.ToString("MMMM")</div>
        </div>
        <div class="dashboard-card weather" style="box-shadow: inset 4px 0 0 #3bb275, 0 1px 0 rgba(0, 0, 0, 0.1);">
            <div class="dashboard-card__title"><span class="wi wi-day-sunny"></span>Günlük rapor yükle</div>
            <div class="dashboad-card__content">
                <div class="dashboard-card__card-piece">




                    @using (Html.BeginForm("UploadFiles", "Home", FormMethod.Post, new { enctype = "multipart/form-data", id = "uploadForm" }))
                    {
                        <div class="file-upload">
                            <input type="file" name="File" id="fileInput" multiple>

                            <button type="button" id="chooseFilesBtn" class="btn btn-dark" @(Model.HasReportForToday ? "disabled" : "") onclick="document.getElementById('fileInput').click();">Choose Files</button>
                            <div class="selected-files-container">
                                <div id="selectedFiles" class="selected-files">

                                    @if (Model.ExistingReportForToday != null)
                                    {
                                        <div style="display:flex;flex-flow:row;" data-report-id="@Model.ExistingReportForToday.Id">
                                            <span style="max-width: 415px;overflow-wrap: anywhere;overflow: overlay;">@Model.ExistingReportForToday.FileName</span>
                                            <button type="button" id="deleteButton" class="btn btn-danger" onclick="Sure(@Model.ExistingReportForToday.Id)" style="display:none;">Delete</button>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div id="buttons" style="display:flex;flex-flow:row;gap:1rem;">

                                <button type="button" id="editButton" class="btn btn-dark edit-button" style="width: 120px;" @(Model.HasReportForToday ? "" : "disabled")>Edit</button>
                                <button type="submit" id="submitButton" class="btn btn-dark submit-button" style="width: 120px;" disabled>Submit</button>
                            </div>
                        </div>
                    }
                    <style>

                        .report-container {
                            height: 601px;
                            margin-left: auto;
                            width: 321px;
                            padding: 2rem;
                        }

                        .selected-files-container {
                            max-height: 300px;  
                            overflow-y: auto;
                            border: 1px solid #000;  
                        }
 
                        .file-upload {
                            display: flex;
                            flex-direction: column;
                            align-items: center;
                            margin-top: 1rem;
                            font-size: smaller;
                        }

                        #fileInput {
                            display: none;
                        }

                        label {
                            background-color: #3498db;
                            color: #fff;
                            padding: 10px 20px;
                            cursor: pointer;
                        }

                        .selected-files {
                            text-align: left;
                        }

                        .delete-button {
                            background-color: #ff0000;
                            color: #fff;
                            border: none;
                            cursor: pointer;
                            padding: 5px 10px;
                            margin-left: 10px;
                            align-self: end;
                        }

                        .selected-files-container {
                            width: 75%;
                            overflow-y: auto;
                            border: 1px solid #000;
                            padding: 1rem;
                            overflow-x: hidden;
                            margin-block: 1rem;
                        }

                        .sub-selected-file {
                            display: flex;
                            flex-direction: row;
                            flex-wrap: nowrap;
                            justify-content: space-between;
                            padding-block: 1rem;
                            border-bottom: dashed;
                        }

                    </style>
                    <script>

                        function Sure(reportId) {
                            swal({
                                title: "Bu raporu silmek istediğinden emin misin?",
                                icon: "warning",
                                buttons: true,
                                dangerMode: true,
                            })
                                .then((willDelete) => {
                                    if (willDelete) {
                                        deleteReport(reportId);
                                    }
                                });


                        }

                        function deleteReport(reportId) {
                            $.ajax({
                                url: '/Home/DeleteReport',
                                type: 'POST',
                                data: { reportId: reportId },
                                success: function (result) {
                                    if (result.success) {

                                        location.reload();

                                    } else {

                                        swal("Rapor silinemedi.", {
                                            icon: "error",
                                        });
                                    }
                                },
                                error: function (error) {
                                    swal("Rapor silinemedi.", {
                                        icon: "error",
                                    });
                                }
                            });
                        }
                    </script>
                    @section scripts {
                        <script>
                            document.addEventListener("DOMContentLoaded", function () {
                                var fileInput = document.getElementById("fileInput");
                                var submitButton = document.getElementById("submitButton");
                                var editButton = document.getElementById("editButton");
                                var chooseFilesBtn = document.getElementById("chooseFilesBtn");
                                var deleteButton = document.getElementById("deleteButton");

                                fileInput.addEventListener("change", function () {
                                    submitButton.disabled = fileInput.files.length === 0;
                                });

                                editButton.addEventListener("click", function () {
                                    if (editButton.innerText === "Edit") {
                                        //Edit mode
                                        chooseFilesBtn.disabled = false;
                                        deleteButton.style.display = "block";
                                        editButton.innerText = "Exit Edit";
                                    } else {
                                        // Exit edit mode
                                        chooseFilesBtn.disabled = true;
                                        deleteButton.style.display = "none";
                                        editButton.innerText = "Edit";
                                    }
                                });
                            });
                        </script>
                        <script>
                            // Dosya giriş alanını dinleyin
                            const fileInput = document.getElementById("fileInput");
                            fileInput.addEventListener("change", function () {
                                const selectedFiles = fileInput.files;

                               
                                if (selectedFiles.length > 0) {
                                    //Dosya adlarını ve boyutlarını görüntüle 
                                    const fileInfoContainer = document.getElementById("selectedFiles");

                                    fileInfoContainer.innerHTML = ""; // Önceki dosya bilgilerini temizle

                                    for (let i = 0; i < selectedFiles.length; i++) {
                                        const file = selectedFiles[i];
                                        const fileName = file.name;
                                        const fileSize = (file.size / 1024).toFixed(2) + " KB";

                                        // Dosya bilgilerini görüntülemek için yeni bir öğe oluşturun
                                        const fileInfoItem = document.createElement("div");
                                        fileInfoItem.textContent = `${fileName} (${fileSize})`;

                                        // Dosya bilgilerini fileInfoContainer'a ekleyin
                                        fileInfoContainer.appendChild(fileInfoItem);
                                    }
                                }
                            });
                             
                        </script>


                    }


                    <br />

                    @if (TempData["Message"] != null)
                    {
                        <div id="alertDiv" class="alert @(TempData["AlertClass"])">
                            @TempData["Message"]
                        </div>

                        <script>
                            document.addEventListener('DOMContentLoaded', function () {
                                setTimeout(function () {
                                    var alertDiv = document.getElementById('alertDiv');
                                    alertDiv.style.display = 'none';
                                }, 5000);
                            });
                        </script>
                    }

                </div>
            </div>
        </div>
        <div class="dashboard-card temperature" style="background-color:transparent;"> 
            <div class="dashboad-card__content">
                <div class="dashboard-card__card-piece">
                    <div class="calendar-container">
                        <div class="calendar-header">
                            <button style="padding-left: 12px;" id="prevMonth"><i class="arrow left"></i></button>

                            <h2 id="currentMonthYear"></h2>
                            <button style="padding-left: 9px;" id="nextMonth"><i class="arrow right"></i></button>
                        </div>
                        <div class="calendar" id="calendar"></div>
                    </div>
                    <style>
                        .calendar-container {
                            background-color: #fff;
                            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                            border-radius: 8px;
                            overflow: hidden;
                        }

                        .calendar-header {
                            display: flex;
                            justify-content: space-between;
                            align-items: center;
                            padding: 10px;
                            background-color: black;
                            color: #fff;
                        }

                        .calendar {
                            display: grid;
                            grid-template-columns: repeat(7, 1fr);
                            gap: 1px;
                        }

                        .day {
                            display: flex;
                            justify-content: center;
                            align-items: center;
                            height: 40px;
                            border: 1px solid #ddd;
                            cursor: pointer;
                        }

                        .marked {
                            background-color: black;
                            color: #fff;
                        }

                        .arrow {
                            border: solid black;
                            border-width: 0 3px 3px 0;
                            display: inline-block;
                            padding: 3px;
                        }

                        .right {
                            transform: rotate(-45deg);
                            -webkit-transform: rotate(-45deg);
                        }

                        .left {
                            transform: rotate(135deg);
                            -webkit-transform: rotate(135deg);
                        }

                        button#prevMonth, button#nextMonth {
                            display: flex;
                            align-content: center;
                            height: 30px;
                            flex-wrap: wrap;
                            border-radius: 50%;
                            width: 30px;
                            background-color: white;
                            border: 0;
                        }
                    </style>
                    <script>
                        document.addEventListener('DOMContentLoaded', function () {
                            const calendarContainer = document.getElementById('calendar');
                            const currentMonthYearElement = document.getElementById('currentMonthYear');
                            const prevMonthButton = document.getElementById('prevMonth');
                            const nextMonthButton = document.getElementById('nextMonth');

                            let currentDate = new Date();
                            var markedDates = @Html.Raw(Json.Serialize(ViewBag.MarkedDates));

                            function generateCalendar(year, month) {
                                const daysInMonth = new Date(year, month + 1, 0).getDate();
                                const firstDay = new Date(year, month, 1).getDay();

                                calendarContainer.innerHTML = '';
                                 
                                for (let i = 0; i < firstDay; i++) {
                                    const emptyDay = document.createElement('div');
                                    emptyDay.classList.add('day', 'empty');
                                    calendarContainer.appendChild(emptyDay);
                                }
                                 
                                for (let i = 1; i <= daysInMonth; i++) {
                                    const day = document.createElement('div');
                                    day.classList.add('day');
                                    day.textContent = i;
                                     
                                    if (markedDates.includes(`${year}-${month + 1}-${i}`)) {
                                        day.classList.add('marked');
                                    }
 
                                    calendarContainer.appendChild(day);
                                }

                                currentMonthYearElement.textContent = `${getMonthName(month)} ${year}`;
                            }

                            function getMonthName(month) {
                                const monthNames = [
                                    'January', 'February', 'March', 'April',
                                    'May', 'June', 'July', 'August',
                                    'September', 'October', 'November', 'December'
                                ];
                                return monthNames[month];
                            }

                            function updateCalendar() {
                                const year = currentDate.getFullYear();
                                const month = currentDate.getMonth();
                                generateCalendar(year, month);
                            }

                            prevMonthButton.addEventListener('click', function () {
                                currentDate.setMonth(currentDate.getMonth() - 1);
                                updateCalendar();
                            });

                            nextMonthButton.addEventListener('click', function () {
                                currentDate.setMonth(currentDate.getMonth() + 1);
                                updateCalendar();
                            });

                            updateCalendar();
                        });

                    </script>
                </div>
            </div>
        </div>
        <div onclick="showactivetasks()" style="cursor:pointer;padding-block-start: 2.5rem;box-shadow: inset 4px 0 0 #3bb275, 0 1px 0 rgba(0, 0, 0, 0.1);" class="dashboard-card wifi">
            <div class="dashboad-card__content">
                <div class="dashboard-card__card-piece">
                    <div class="status status_success">
                        <div class="status__icon"><span class="fa fa-check"></span></div>
                        <p onclick="showactivetasks()" class="status__text">Görevler</p>
                    </div>
                    <a asp-action="ShowActiveTasks" asp-controller="Task" asp-route-id="@Model.Intern.Id" class="dashboard-card__link" tabindex="1">View in another tab<span class="fa fa-angle-right"></span></a>
                </div>
            </div>
        </div>
        <div onclick="shownotactivetasks()" style="cursor:pointer;padding-block-start: 2.5rem;box-shadow: inset 4px 0 0 #3bb275, 0 1px 0 rgba(0, 0, 0, 0.1);" class="dashboard-card alarm">
            <div class="dashboad-card__content">
                <div class="dashboard-card__card-piece">
                    <div class="status status_danger">
                        <div class="status__icon"><span class="fa fa-times"></span></div>
                        <p onclick="shownotactivetasks()" class="status__text">Geçmiş Görevler</p>
                    </div>
                    <a asp-action="ShowOverdueTasks" asp-controller="Task" asp-route-id="@Model.Intern.Id" class="dashboard-card__link" tabindex="1">View in another tab<span class="fa fa-angle-right"></span></a>
                </div>
            </div>
        </div>
        <div class="dashboard-card light" style="box-shadow: inset 4px 0 0 #3bb275, 0 1px 0 rgba(0, 0, 0, 0.1);">
            <div class="dashboad-card__content">
                <div class="dashboard-card__card-piece">
                    <style>
                        .task-container {
                            height: fit-content;
                            max-height: 148px;
                            width: 684px;
                            overflow-y: auto;
                            overflow-x: hidden;
                            background-color: transparent;
                            border-radius: 0 !important;
                            display: flex;
                            flex-direction: row;
                            flex-wrap: wrap;
                            margin-block: 1rem;
                            margin-inline: 1rem;
                        }

                        .task {
                            background-color: #cbd6e8;
                            min-width: calc(50% - 2rem); /* Adjust the width as needed (e.g., 50% for two items in a row) */
                            height: fit-content;
                            border-radius: 10px;
                            margin-bottom: 1rem;
                            margin-right: 2rem;
                            padding-inline: 1rem;
                            padding-block: 1rem;
                        }
                    </style>


                    <div style="display:flex;flex-flow:column;">

                        <div id="activetaskdiv">
                            <p class="dashboard-card__title">Aktif görevler</p>
                            <div class="task-container" @* onWheel="this.scrollLeft+=event.deltaY>0?100:-100" *@>
                                @if (Model.AssignedActiveTask != null && Model.AssignedActiveTask.Count > 0)
                                {
                                    @foreach (var task in Model.AssignedActiveTask)
                                    {
                                        <div class="task">
                                            <h3 style="font-size: 22px;">@task.Task.Subject</h3>
                                            <p style="margin-bottom: 0rem;">Assignment Date: @task.AssignmentDate</p>
                                            <p style="margin-bottom: 0rem;">Due Date: @task.DueDate</p>
                                            <a href="@Url.Content("~/TaskFiles/" + task.Task.Contents)" target="_blank">Download</a>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="task" style="width:100%;color: #842029;border-color: #f5c2c7;background-color: #f8d7da !important;margin-right: 0rem;">
                                        <p>Aktif görev bulunmamaktadır.</p>
                                    </div>

                                }

                            </div>
                        </div>
                        <div id="notactivetaskdiv" style="display:none;">
                            <p class="dashboard-card__title">Geçmiş görevler</p>
                            <div class="task-container" @* onWheel="this.scrollLeft+=event.deltaY>0?100:-100" *@>
                                @if (Model.AssignedOverdueTask != null && Model.AssignedOverdueTask.Count > 0)
                                {
                                    @foreach (var task in Model.AssignedOverdueTask)
                                    {
                                        <div class="task">
                                            <h3 style="font-size: 22px;">@task.Task.Subject</h3>
                                            <p style="margin-bottom: 0rem;">Assignment Date: @task.AssignmentDate</p>
                                            <p style="margin-bottom: 0rem;">Due Date: @task.DueDate</p>
                                            <a href="@Url.Content("~/TaskFiles/" + task.Task.Contents)" target="_blank">Download</a>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="task" style="width:100%;color: #842029;border-color: #f5c2c7;background-color: #f8d7da !important;margin-right: 0rem;">
                                        <p>Son teslim tarihi geçmiş görev bulunmamaktadır.</p>
                                    </div>

                                }

                            </div>
                        </div>

                    </div>
                    <script>
                        function showactivetasks() {
                            var atdiv = document.getElementById('activetaskdiv');
                            var natdiv = document.getElementById('notactivetaskdiv');
                            atdiv.style.display = "block";
                            natdiv.style.display = "none";

                        }
                        function shownotactivetasks() {
                            var atdiv = document.getElementById('activetaskdiv');
                            var natdiv = document.getElementById('notactivetaskdiv');
                            natdiv.style.display = "block";
                            atdiv.style.display = "none";

                        }
                    </script>
                </div>
            </div>
        </div>

    </div>
</div>
    </div>

